{"/home/travis/build/npmtest/node-npmtest-ember-can/test.js":"/* istanbul instrument in package npmtest_ember_can */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-can/lib.npmtest_ember_can.js":"/* istanbul instrument in package npmtest_ember_can */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_can = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_can = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-can/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-can && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_can */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_can\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_can.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_can.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_can.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_can.__dirname + '/lib.npmtest_ember_can.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-can'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/ability.js":"import Ember from 'ember';\n\nexport default Ember.Object.extend({\n  model: null\n});","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/can-mixin.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  canService: Ember.inject.service('can'),\n\n  can: function(abilityName, resource, additionalProperties) {\n    return this.get('canService').can(abilityName, resource, additionalProperties);\n  },\n\n  cannot: function(abilityName, resource, additionalProperties) {\n    return !this.can(abilityName, resource, additionalProperties);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/computed.js":"import Ember from 'ember';\n\nconst { get, set, getOwner } = Ember;\n\nexport default {\n  ability: function(type, resourceName) {\n    if (arguments.length === 1) {\n      resourceName = type;\n    }\n\n    return Ember.computed(resourceName, function() {\n      const ability = getOwner(this).lookup(`ability:${type}`);\n\n      Ember.assert(`No ability class found for ${type}`, ability);\n\n      const resource = get(this, resourceName);\n      set(ability, 'model', resource);\n      return ability;\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/packaging/promise_spawn.js":"/* jshint node: true */\n\nvar RSVP = require('rsvp');\nvar spawn = require('child_process').spawn;\n\nfunction run(command, args, opts) {\n  return new RSVP.Promise(function(resolve, reject) {\n    var p = spawn(command, args, opts || {});\n    var stderr = '';\n    p.stderr.on('data', function(output) {\n      stderr += output;\n    });\n    p.on('close', function(code){\n      if (code !== 0) {\n        console.log(stderr);\n        reject(command + \" exited with nonzero status\");\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nmodule.exports = run;\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/packaging/select-ember-version.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\nvar run = require('./promise_spawn');\nvar RSVP = require('rsvp');\n\nfunction maybeChangeVersion(channel) {\n  if (typeof(channel) === 'undefined') {\n    return RSVP.Promise.resolve('existing');\n  }\n  var bowerFile = path.join(__dirname, '..', 'bower.json');\n  return run('git', ['checkout', bowerFile]).then(function(){\n    var bowerJSON = require(bowerFile);\n    fs.writeFileSync(bowerFile, JSON.stringify(rewrite(bowerJSON, channel), null, 2));\n    return run('bower', ['install'], {cwd: path.join(__dirname, '..')})\n    .then(function(){ return chooseTemplateCompiler(channel);});\n  }).then(function(){return channel;});\n}\n\nfunction isPreHTMLBars(channel) {\n  return /^1\\.8/.test(channel);\n}\n\nfunction rewrite(bowerJSON, channel) {\n  if (channel === 'existing') {\n    return bowerJSON;\n  }\n\n  if (!bowerJSON.resolutions) {\n    bowerJSON.resolutions = {};\n  }\n\n  bowerJSON.dependencies.ember = \"components/ember#\" + channel;\n  bowerJSON.resolutions.ember = channel;\n\n  if (isPreHTMLBars(channel)) {\n    bowerJSON.dependencies.handlebars = \"1.3.0\";\n    bowerJSON.resolutions.handlebars = \"1.3.0\";\n  } else {\n    bowerJSON.dependencies.handlebars = \"2.0.0\";\n    bowerJSON.resolutions.handlebars = \"2.0.0\";\n  }\n\n  return bowerJSON;\n}\n\n\nfunction chooseTemplateCompiler(channel) {\n  var state;\n\n  if (channel === 'existing') {\n    return RSVP.Promise.resolve();\n  }\n\n  if (isPreHTMLBars(channel)) {\n    state = {\n      'broccoli-ember-hbs-template-compiler' : 'install',\n      'ember-cli-htmlbars' : 'uninstall'\n    };\n  } else {\n    state = {\n      'broccoli-ember-hbs-template-compiler' : 'uninstall',\n      'ember-cli-htmlbars' : 'install'\n    };\n  }\n  return RSVP.Promise.all(Object.keys(state).map(function(module){\n    return run('npm', [state[module], '--save-dev', module]);\n  })).then(function() {\n    var configFile = path.join(__dirname, '..', 'tests', 'dummy', 'config', 'environment.js');\n    return run('git', ['checkout', configFile]).then(function(){\n      var config = fs.readFileSync(configFile, { encoding: 'utf8' });\n\n      if (!isPreHTMLBars(channel) && channel !== 'release') {\n        // This feature flag is already merged into ember, but our\n        // version of ember-cli still apparently looks for it to know\n        // how to compile templates.\n        config = config.replace(\"//'ember-htmlbars': true\", \"'ember-htmlbars': true\");\n        fs.writeFileSync(configFile, config);\n      }\n    });\n  });\n}\n\nfunction foundVersion(package) {\n  var filename = path.join(__dirname, '..', 'bower_components', package, 'bower.json');\n  if (fs.existsSync(filename)) {\n    return require(filename).version;\n  }\n  filename = path.join(__dirname, '..', 'node_modules', package, 'package.json');\n  if (fs.existsSync(filename)) {\n    return require(filename).version;\n  }\n  return \"none\";\n}\n\nfunction logVersions(channel) {\n  console.log(\"Based on \" + channel + \" I'm using:\");\n  ['ember', 'handlebars', 'broccoli-ember-hbs-template-compiler', 'ember-cli-htmlbars'].map(function(module){\n    console.log(\"  \" + module + \" \" + foundVersion(module));\n  });\n}\n\nmaybeChangeVersion(process.env.EMBER_CHANNEL).then(function(channel){\n  logVersions(channel);\n  process.exit(0);\n}).catch(function(err){\n  console.log(err);\n  console.log(err.stack);\n  process.exit(-1);\n});","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/helpers/can.js":"import Ember from 'ember';\n\nexport default Ember.Helper.extend({\n  can: Ember.inject.service(),\n\n  compute([name, resource], hash) {\n    const service = this.get('can');\n    const ability = service.build(name, resource, hash);\n    const { propertyName } = service.parse(name);\n\n    if (this._ability) {\n      this._ability.removeObserver(this._abilityProp, this, 'recompute');\n    }\n\n    this._ability     = ability;\n    this._abilityProp = propertyName;\n\n    ability.addObserver(propertyName, this, 'recompute');\n\n    return ability.get(propertyName);\n  },\n\n  destroy() {\n    this._ability.removeObserver(this._abilityProp, this, 'recompute');\n    return this._super();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/helpers/cannot.js":"import Ember from 'ember';\n\nconst { getOwner, typeOf } = Ember;\n\nexport default Ember.Helper.extend({\n  helper: Ember.computed(function() {\n    var helper = getOwner(this).lookup('helper:can');\n\n    return typeOf(helper) === 'instance' ? helper : helper.create();\n  }),\n\n  compute(params, hash) {\n    return !this.get('helper').compute(params, hash);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/addon/utils/normalize.js":"import Ember from 'ember';\n\nconst classify = Ember.String.classify;\n\nconst stopwords = [\n  \"of\", \"in\", \"for\", \"to\", \"from\", \"on\"\n];\n\nexport function normalizeCombined(str) {\n  const parts = str.split(' ');\n\n  const abilityName = parts.pop();\n\n  const last = parts[parts.length - 1];\n  if (stopwords.indexOf(last) !== -1) {\n    parts.pop();\n  }\n\n  const propertyName = normalizeAbilityMethod(parts.join(\" \"));\n\n  return {\n    propertyName, abilityName\n  };\n}\n\nfunction normalizeAbilityMethod(str) {\n  return 'can' + classify(str);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-can/node_modules/ember-can/app/initializers/setup-ember-can.js":"/* globals requirejs */\nimport require from 'require';\nvar Resolver;\n\n// This is a bit of a hack, but there is no way to detect\n// which module is needed via normal `import` statements\nif (requirejs.entries['ember-resolver'] || requirejs.entries['ember-resolver/index']) {\n  // ember-resolver is provided when the consuming\n  // application uses ember-resolver@^2.0.0 from NPM\n  Resolver = require('ember-resolver')['default'];\n} else {\n  // ember/resolver is provided when the consuming\n  // application uses ember-resolver@^0.1.x from Bower\n  Resolver = require('ember/resolver')['default'];\n}\n\nResolver.reopen({\n  pluralizedTypes: {\n    ability: 'abilities'\n  }\n});\n\nexport default {\n  name: 'setup-ember-can',\n  initialize: function(application) {\n    // make sure we create new ability instances each time, otherwise we stomp on each other's models\n    if (application.optionsForType) { // it's a container / registry in 1.13.x\n      application.optionsForType('ability', { singleton: false });\n    } else { // Ember 2.0.x\n      application.registerOptionsForType('ability', { singleton: false });\n    }\n  }\n};\n"}